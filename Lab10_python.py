# –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–∏–±–ª–∏–∂—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞
# –¥–≤—É–º—è —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ (–ø–æ –≤–∞—Ä–∏–∞–Ω—Ç—É).
# –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏: –Ω–∞—á–∞–ª–æ, –∫–æ–Ω–µ—Ü –æ—Ç—Ä–µ–∑–∫–∞, N1, N2 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è
# –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.
# –°—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ - –ø–∞—Ä–∞–±–æ–ª
# –î–∞–ª–µ–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
#
# –ù–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω–æ–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ
# —Ç–æ—á–Ω—ã–º (—É–∫–∞–∑–∞–≤ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è), –∞ –¥–ª—è –º–µ–Ω–µ–µ
# —Ç–æ—á–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ
# –∏–Ω—Ç–µ–≥—Ä–∞–ª –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω —Å –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é:
# |ùêº(ùëÅ) ‚àí ùêº(2ùëÅ)| < Œµ
# –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–∏—Å–∞—Ç—å –≤ –≤–∏–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö
# —Ñ—É–Ω–∫—Ü–∏–π, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ª–µ–≥–∫–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∏ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ
# –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
# –ë—É–ª–≥–∞–∫–æ–≤ –ê—Ä—Å–µ–Ω–∏–π –°–µ—Ä–≥–µ–µ–≤–∏—á –ò–£7-16–ë

from Functions import *

def f(x):
    return x ** 2

def F(x):
    return (x ** 3) / 3

def riemann_sum(N, start, end):
    S = 0
    step = (end - start) / N
    start_temp = start
    end_temp = start + step
    for i in range(N):
        S += f((start_temp + end_temp) / 2) * (end_temp - start_temp)
        start_temp = end_temp
        end_temp += step
    return S

def simpsons_rule(N, start, end):
    S = 0
    step = (end - start) / N
    start_temp = start
    end_temp = start + step
    for i in range(N):
        S += ((end_temp - start_temp) / 6) * (f(start_temp) + 4 * f((start_temp + end_temp) / 2) + f(end_temp))
        start_temp = end_temp
        end_temp += step
    return S

def better_N(var, N, EPS, start, end):
    flag = True
    while True:
        val = abs(riemann_sum(N, start, end) - riemann_sum(2 * N, start, end)) if var == 1 \
            else abs(simpsons_rule(N, start, end) - simpsons_rule(2 * N, start, end))
        if flag and N > 1000000:
            ans = input('–ö–æ–ª-–≤–æ —Ä–∞–∑–±–∏–µ–Ω–∏–π –ø—Ä–µ–≤—ã—Å–∏–ª–æ 1e6! –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏ –≤–≤–µ–¥–∏—Ç–µ —á—Ç–æ-—Ç–æ, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å—Å—è: ')
            if ans == '':
                flag = False
            else:
                break
        if val < EPS:
            flag = False
            break
        N *= 2
    if flag:
        print('–ó–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ—Ä–≤–∞–Ω–æ, —Ç.–∫. –±—ã–ª–æ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∏–º')
    else:
        print(f'–ó–∞–¥–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –º–µ—Ç–æ–¥–∞ {"—Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤" if var == 1 else "–ø–∞—Ä–∞–±–æ–ª"} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø—Ä–∏ N = {N}')
        print('–¢–æ—á–Ω–æ—Å—Ç—å:', riemann_sum(N, start, end) if var == 1 else simpsons_rule(N, start, end))

start = validation(input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –æ—Ç—Ä–µ–∑–∫–∞: '), float)
end = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –æ—Ç—Ä–µ–∑–∫–∞: '), float)
while start > end:
    print('–û—à–∏–±–∫–∞: –ö–æ–Ω–µ—Ü –æ—Ç—Ä–µ–∑–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –µ–≥–æ –Ω–∞—á–∞–ª–∞')
    start = validation(input('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –æ—Ç—Ä–µ–∑–∫–∞: '), float)
    end = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –æ—Ç—Ä–µ–∑–∫–∞: '), float)

N1 = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è N1: '), int)
while N1 == 0:
    print('–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ –≤—Å–µ–≥–¥–∞ > 0')
    N1 = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è N1: '), int)

N2 = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è N2: '), int)
while N2 == 0:
    print('–û—à–∏–±–∫–∞: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ –≤—Å–µ–≥–¥–∞ > 0')
    N2 = validation(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∫–æ–≤ —Ä–∞–∑–±–∏–µ–Ω–∏—è N2: '), int)

real_integral = F(end) - F(start)
rs1 = riemann_sum(N1, start, end)
rs2 = riemann_sum(N2, start, end)
sr1 = simpsons_rule(N1, start, end)
sr2 = simpsons_rule(N2, start, end)

absolute_error_rs1 = abs(rs1 - real_integral)
absolute_error_rs2 = abs(rs2 - real_integral)
absolute_error_sr1 = abs(sr1 - real_integral)
absolute_error_sr2 = abs(sr2 - real_integral)

percent_error_rs1 = abs(absolute_error_rs1 / real_integral) * 100
percent_error_rs2 = abs(absolute_error_rs2 / real_integral) * 100
percent_error_sr1 = abs(absolute_error_sr1 / real_integral) * 100
percent_error_sr2 = abs(absolute_error_sr2 / real_integral) * 100

print('-' * 65)
print(f'|   {"":^32}|{"I(N1)":^13}|{"I(N2)":^13}|')
print(f'|  {"–ú–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤":^32} |  {rs1:^10.5f} |  {rs2:^10.5f} |')
print(f'|  {"–ú–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª":^32} | ', f'{sr1:^10.5f}' if N1 % 2 == 0 else f'{"-":^10}', '| ',
      f'{sr2:^10.5f}' if N2 % 2 == 0 else f'{"-":^10}', '|')
print('-' * 108)
print(f'|  {"":^32} |  {"–ú–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤":^32} | {"–ú–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª":^32} |')
print(f'|  {"–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è N1":^32} | {absolute_error_rs1:^32.5f}', ' |',
      f'{absolute_error_sr1:^32.5f}' if N1 % 2 == 0 else f'{"-":^32}', '|')
print(f'|  {"–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è N2":^32} | {absolute_error_rs2:^32.5f}', ' |',
      f'{absolute_error_sr2:^32.5f}' if N2 % 2 == 0 else f'{"-":^32}', '|')
print(f'|  {"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è N1":^32} | {percent_error_rs1 :^32.5f}', ' |',
      f'{percent_error_sr1:^32.5f}' if N1 % 2 == 0 else f'{"-":^32}', '|')
print(f'|  {"–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è N2":^32} | {percent_error_rs2:^32.5f}', ' |',
      f'{percent_error_sr2:^32.5f}' if N2 % 2 == 0 else f'{"-":^32}', '|')
print('-' * 108)

EPS = validation(input('–í–≤–µ–¥–∏—Ç–µ EPS: '), float)
while not 0 < EPS < 1:
    print('–û—à–∏–±–∫–∞! - –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π EPS (0 < EPS < 1)')
    EPS = validation(input('–í–≤–µ–¥–∏—Ç–µ EPS: '), float)

if N1 % 2 == 0:
    if percent_error_rs1 < percent_error_sr1:
        print('–ú–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ —Ç–æ—á–Ω–µ–µ, —É–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª')
        better_N(2, N1, EPS, start, end)
    else:
        print('–ú–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª —Ç–æ—á–Ω–µ–µ, —É–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤')
        better_N(1, N1, EPS, start, end)
elif N2 % 2 == 0:
    if percent_error_rs2 < percent_error_sr2:
        print('–ú–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ —Ç–æ—á–Ω–µ–µ, —É–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª')
        better_N(2, N2, EPS, start, end)
    else:
        print('–ú–µ—Ç–æ–¥ –ø–∞—Ä–∞–±–æ–ª —Ç–æ—á–Ω–µ–µ, —É–ª—É—á—à–∞–µ–º –º–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤')
        better_N(1, N2, EPS, start, end)
else:
    print('–ú–µ—Ç–æ–¥ —Å—Ä–µ–¥–∏–Ω–Ω—ã—Ö –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–æ–≤ —Ç–æ—á–Ω–µ–µ, —Ç.–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ –º–µ—Ç–æ–¥—É –ø–∞—Ä–æ–±–æ–ª –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ => –£–ª—É—á—à–∞–µ–º –µ–≥–æ')
    better_N(1, N1, EPS, start, end)

print('–†–µ–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞, —á–µ—Ä–µ–∑ –ø–µ—Ä–≤–æ–æ–±—Ä–∞–∑–Ω—É—é:', real_integral)
