# Найти максимальное значение над главной диагональю и минимальное - под
# побочной диагональю.
# Булгаков Арсений Сергеевич ИУ7-16Б

# Импортируем самописные функции проверки и создания матрицы по формуле
from Functions import *

print('Введите квадратную матрицу с минимальной размерностью 2 * 2')
n = validation(input('Введите размерность квадратной матрицы: '), int)
arr = matrix_init(n, n) # Вводим матрицу используя самописную функцию

while not (len(arr[0]) > 1 and len(arr) > 1): # Проверяем размер матрицы
    print('Ошибка! - Матрица слишком мала')
    arr = matrix_init()
print('Ваша матрица:')
print_matrix(arr) # Выводим матрицу используя самописную функцию

above_main = arr[0][0] # Массив элементов над главной диагональю
under_sub = arr[1][len(arr) - 1] # Массив элементов под побочной диагональю

# Получаем элементы над главной диагональю
for i in range(len(arr)): # Идем по по строкам
    for j in range(len(arr[i]) - 1, i, -1): # В строке идем с конца и до индекса строки не включая
        if arr[i][j] > above_main:
            above_main = arr[i][j]

# Получаем элементы под побочной диагональю
for i in range(len(arr)): # Идем по по строкам
    for j in range(len(arr[i]) - i, len(arr[i])): # В строке идем с длинны строки - индекс строки и до конца
        if arr[i][j] < under_sub:
            under_sub = arr[i][j]

print(f'MAX над главной диагональю: {above_main:.5f}')  # Выводим максимум
print(f'MIN под побочной диагональю: {under_sub:.5f}')  # Выводим минимум
