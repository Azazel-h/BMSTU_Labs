# Подсчитать в каждой строке матрицы D количество элементов, превышающих
# суммы элементов соответствующих строк матрицы Z. Разместить эти
# количества в массиве G, умножить матрицу D на максимальный элемент
# массива G. Напечатать матрицу D до и после преобразования, а также массив G.
# Булгаков Арсений Сергеевич ИУ7-16Б

# Импортируем самописные функции проверки и создания матрицы по формуле
from Functions import *

print('Введите матрицу D')
D = matrix_init() # Вводим матрицу используя самописную функцию
print('Введите матрицу Z (Количество строк останется таким же как у D)')
Z = matrix_init(len(D)) # Вводим матрицу используя самописную функцию
G = [] # Создаем пустой массив G

# Выводим матрицу используя самописную функцию
print()
print('Матрица D до преобразований:')
print_matrix(D)
print()

for d, z in zip(D, Z): # Идем по соответствующим строкам двух матриц
    z_sum = sum(z) # Считаем сумму строки в Z
    counter = 0 # Создаем счетчик
    for j in d: # Сравниваем элементы в D с суммой строки
        if j > z_sum:
            counter += 1
    G.append(counter) # Добовляем количество больших в G
max_G = max(G) # Получаем максимум
D = [[j * max_G for j in i] for i in D] # Умножаем D на максимум из G

# Выводим матрицу используя самописную функцию
print('Матрица D после преобразования:')
print_matrix(D)
print('Массив G:', G)